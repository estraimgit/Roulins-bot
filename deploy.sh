#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SERVER="user1@176.108.243.54"
APP_DIR="/home/user1/prisoners-dilemma-bot"
DOCKER_IMAGE="prisoners-dilemma-bot"

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Prisoner's Dilemma Bot –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
if [ ! -f ".env" ]; then
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ config.env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:"
    echo "cp config.env.example .env"
    echo "nano .env"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BOT_TOKEN
if ! grep -q "BOT_TOKEN=" .env || grep -q "BOT_TOKEN=your_bot_token_here" .env; then
    echo "‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!"
    echo "–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª"
    exit 1
fi

echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"

# –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞
echo "üì¶ –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞..."
tar --exclude='.git' \
    --exclude='data' \
    --exclude='logs' \
    --exclude='__pycache__' \
    --exclude='*.pyc' \
    --exclude='venv' \
    --exclude='.env' \
    --exclude='prisoners-dilemma-bot.tar.gz' \
    -czf prisoners-dilemma-bot.tar.gz .

echo "‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω"

# –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
echo "üì§ –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
scp prisoners-dilemma-bot.tar.gz $SERVER:/tmp/
scp .env $SERVER:/tmp/

echo "‚úÖ –§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã"

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
echo "üîß –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
ssh $SERVER << 'EOF'
    set -e
    
    echo "–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    mkdir -p /home/user1/prisoners-dilemma-bot
    cd /home/user1/prisoners-dilemma-bot
    
    echo "–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤..."
    tar -xzf /tmp/prisoners-dilemma-bot.tar.gz
    
    echo "–ö–æ–ø–∏—Ä—É–µ–º .env —Ñ–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤–∞–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫..."
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ .env
    if [ -f .env ]; then
        OLD_BOT_TOKEN=$(grep "^BOT_TOKEN=" .env | cut -d'=' -f2- || echo "")
        OLD_CLOUD_API_KEY=$(grep "^CLOUD_RU_API_KEY=" .env | cut -d'=' -f2- || echo "")
        OLD_ADMIN_IDS=$(grep "^ADMIN_USER_IDS=" .env | cut -d'=' -f2- || echo "")
        OLD_TESTING_MODE=$(grep "^TESTING_MODE=" .env | cut -d'=' -f2- || echo "")
        OLD_MULTIPLE_SESSIONS=$(grep "^ALLOW_MULTIPLE_SESSIONS=" .env | cut -d'=' -f2- || echo "")
        OLD_LLM_MODEL=$(grep "^LLM_MODEL=" .env | cut -d'=' -f2- || echo "")
        OLD_LLM_ENABLED=$(grep "^LLM_ENABLED=" .env | cut -d'=' -f2- || echo "")
        OLD_LLM_ANALYSIS_ENABLED=$(grep "^LLM_ANALYSIS_ENABLED=" .env | cut -d'=' -f2- || echo "")
    fi
    
    # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π .env
    cp /tmp/.env .
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
    if [ ! -z "$OLD_BOT_TOKEN" ]; then
        sed -i "s|^BOT_TOKEN=.*|BOT_TOKEN=$OLD_BOT_TOKEN|" .env
    fi
    if [ ! -z "$OLD_CLOUD_API_KEY" ]; then
        sed -i "s|^CLOUD_RU_API_KEY=.*|CLOUD_RU_API_KEY=$OLD_CLOUD_API_KEY|" .env
    fi
    if [ ! -z "$OLD_ADMIN_IDS" ]; then
        sed -i "s|^ADMIN_USER_IDS=.*|ADMIN_USER_IDS=$OLD_ADMIN_IDS|" .env
    fi
    if [ ! -z "$OLD_TESTING_MODE" ]; then
        sed -i "s|^TESTING_MODE=.*|TESTING_MODE=$OLD_TESTING_MODE|" .env
    fi
    if [ ! -z "$OLD_MULTIPLE_SESSIONS" ]; then
        sed -i "s|^ALLOW_MULTIPLE_SESSIONS=.*|ALLOW_MULTIPLE_SESSIONS=$OLD_MULTIPLE_SESSIONS|" .env
    fi
    if [ ! -z "$OLD_LLM_MODEL" ]; then
        sed -i "s|^LLM_MODEL=.*|LLM_MODEL=$OLD_LLM_MODEL|" .env
    fi
    if [ ! -z "$OLD_LLM_ENABLED" ]; then
        sed -i "s|^LLM_ENABLED=.*|LLM_ENABLED=$OLD_LLM_ENABLED|" .env
    fi
    if [ ! -z "$OLD_LLM_ANALYSIS_ENABLED" ]; then
        sed -i "s|^LLM_ANALYSIS_ENABLED=.*|LLM_ANALYSIS_ENABLED=$OLD_LLM_ANALYSIS_ENABLED|" .env
    fi
    
    echo "–°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    mkdir -p data logs
    
    echo "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ backup..."
    if [ -f settings_backup.env ]; then
        # –°–Ω–∞—á–∞–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á cloud.ru (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!)
        CLOUD_API_KEY=$(grep "^CLOUD_RU_API_KEY=" settings_backup.env | cut -d'=' -f2-)
        if [ ! -z "$CLOUD_API_KEY" ]; then
            sed -i "s|^CLOUD_RU_API_KEY=.*|CLOUD_RU_API_KEY=$CLOUD_API_KEY|" .env || echo "CLOUD_RU_API_KEY=$CLOUD_API_KEY" >> .env
            echo "üîë API –∫–ª—é—á cloud.ru –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
        
        # –ó–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        while IFS='=' read -r key value; do
            if [[ ! -z "$key" && ! "$key" =~ ^# && "$key" != "CLOUD_RU_API_KEY" ]]; then
                sed -i "s|^$key=.*|$key=$value|" .env || echo "$key=$value" >> .env
            fi
        done < settings_backup.env
        echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ backup"
    else
        echo "‚ö†Ô∏è Backup —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    fi
    
    echo "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    docker-compose down || true
    
    echo "–°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑..."
    docker-compose build --no-cache
    
    echo "–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
    docker-compose up -d
    
    echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å..."
    docker-compose ps
    
    echo "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏..."
    docker-compose logs --tail=50
EOF

# –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
echo "üßπ –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã..."
rm prisoners-dilemma-bot.tar.gz

echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
echo "ssh $SERVER 'cd $APP_DIR && docker-compose ps'"
echo ""
echo "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
echo "ssh $SERVER 'cd $APP_DIR && docker-compose logs -f'"
echo ""
echo "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
echo "ssh $SERVER 'cd $APP_DIR && docker-compose down'"
