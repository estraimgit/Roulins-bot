#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è LLM –±–æ—Ç–æ–º

SERVER="user1@176.108.243.54"
PROJECT_DIR="/home/user1/prisoners-dilemma-bot"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
print_message() {
    echo -e "${GREEN}$1${NC}"
}

print_error() {
    echo -e "${RED}$1${NC}"
}

print_warning() {
    echo -e "${YELLOW}$1${NC}"
}

print_info() {
    echo -e "${BLUE}$1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    print_info "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å LLM –±–æ—Ç–∞..."
    ssh $SERVER "cd $PROJECT_DIR && docker-compose ps"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ LLM –±–æ—Ç–∞
start_llm_bot() {
    print_message "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º LLM –±–æ—Ç–∞..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –±–æ—Ç
    ssh $SERVER "cd $PROJECT_DIR && docker-compose down"
    
    # –ó–∞–º–µ–Ω—è–µ–º main.py –Ω–∞ main_llm.py
    ssh $SERVER "cd $PROJECT_DIR && cp main_llm.py main.py"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º LLM –±–æ—Ç–∞
    ssh $SERVER "cd $PROJECT_DIR && docker-compose up -d"
    
    print_message "‚úÖ LLM –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!"
    check_status
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ LLM –±–æ—Ç–∞
stop_llm_bot() {
    print_message "‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º LLM –±–æ—Ç–∞..."
    ssh $SERVER "cd $PROJECT_DIR && docker-compose down"
    print_message "‚úÖ LLM –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ LLM –±–æ—Ç–∞
restart_llm_bot() {
    print_message "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º LLM –±–æ—Ç–∞..."
    stop_llm_bot
    sleep 2
    start_llm_bot
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
view_logs() {
    print_info "üìã –õ–æ–≥–∏ LLM –±–æ—Ç–∞:"
    ssh $SERVER "cd $PROJECT_DIR && docker-compose logs --tail=50 -f"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ LLM
update_llm_token() {
    if [ -z "$1" ]; then
        print_error "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω"
        echo ""
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
        echo "  ./llm-manage.sh update-token YOUR_CLOUD_RU_TOKEN"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä:"
        echo "  ./llm-manage.sh update-token sk-1234567890abcdef"
        exit 1
    fi
    
    TOKEN="$1"
    
    print_message "üîß –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω cloud.ru –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    ssh $SERVER "cd $PROJECT_DIR && sed -i 's/CLOUD_RU_API_KEY=.*/CLOUD_RU_API_KEY='$TOKEN'/' .env"
    
    if [ $? -eq 0 ]; then
        print_message "‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
        print_message "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞..."
        restart_llm_bot
    else
        print_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ LLM –∞–Ω–∞–ª–∏–∑–∞
check_llm_analysis() {
    print_info "üß† –ü—Ä–æ–≤–µ—Ä—è–µ–º LLM –∞–Ω–∞–ª–∏–∑..."
    ssh $SERVER "cd $PROJECT_DIR && docker-compose exec prisoners-dilemma-bot python -c \"
from utils.database import DatabaseManager
import json

db = DatabaseManager()
llm_data = db.get_llm_analysis_data()

print(f'–í—Å–µ–≥–æ LLM –∞–Ω–∞–ª–∏–∑–æ–≤: {len(llm_data)}')

if llm_data:
    print('\\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∞–Ω–∞–ª–∏–∑–∞:')
    for i, analysis in enumerate(llm_data[-3:]):
        print(f'\\n{i+1}. –£—á–∞—Å—Ç–Ω–∏–∫: {analysis[\"participant_id\"]}')
        print(f'   –°–æ–æ–±—â–µ–Ω–∏–µ: {analysis[\"user_message\"][:50]}...')
        analysis_json = json.loads(analysis['analysis_json'])
        print(f'   –≠–º–æ—Ü–∏—è: {analysis_json.get(\"emotion\", \"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\")}')
        print(f'   –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {analysis_json.get(\"intent\", \"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\")}')
        print(f'   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis_json.get(\"confidence\", \"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\")}')
else:
    print('LLM –∞–Ω–∞–ª–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
\""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ LLM –¥–∞–Ω–Ω—ã—Ö
export_llm_data() {
    print_message "üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º LLM –¥–∞–Ω–Ω—ã–µ..."
    
    ssh $SERVER "cd $PROJECT_DIR && docker-compose exec prisoners-dilemma-bot python -c \"
from utils.database import DatabaseManager
import json
from datetime import datetime

db = DatabaseManager()
llm_data = db.get_llm_analysis_data()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
export_data = {
    'export_timestamp': datetime.now().isoformat(),
    'total_analyses': len(llm_data),
    'analyses': llm_data
}

with open('/app/data/llm_analysis_export.json', 'w', encoding='utf-8') as f:
    json.dump(export_data, f, ensure_ascii=False, indent=2)

print(f'–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(llm_data)} LLM –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ llm_analysis_export.json')
\""
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É
    scp $SERVER:$PROJECT_DIR/data/llm_analysis_export.json ./llm_analysis_export.json
    print_message "‚úÖ LLM –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ llm_analysis_export.json"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "ü§ñ LLM Bot Management Script"
    echo "=========================="
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "  ./llm-manage.sh [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  start           - –ó–∞–ø—É—Å—Ç–∏—Ç—å LLM –±–æ—Ç–∞"
    echo "  stop            - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å LLM –±–æ—Ç–∞"
    echo "  restart         - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å LLM –±–æ—Ç–∞"
    echo "  status          - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"
    echo "  logs            - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  update-token    - –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω cloud.ru"
    echo "  check-analysis  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å LLM –∞–Ω–∞–ª–∏–∑"
    echo "  export-data     - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å LLM –¥–∞–Ω–Ω—ã–µ"
    echo "  help            - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  ./llm-manage.sh start"
    echo "  ./llm-manage.sh update-token sk-1234567890abcdef"
    echo "  ./llm-manage.sh check-analysis"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "$1" in
    start)
        start_llm_bot
        ;;
    stop)
        stop_llm_bot
        ;;
    restart)
        restart_llm_bot
        ;;
    status)
        check_status
        ;;
    logs)
        view_logs
        ;;
    update-token)
        update_llm_token "$2"
        ;;
    check-analysis)
        check_llm_analysis
        ;;
    export-data)
        export_llm_data
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        print_error "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
