"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –ø–æ –¥–∏–ª–µ–º–º–µ –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ
"""
import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters

from config.settings import Config
from handlers.experiment_handler import ExperimentHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, Config.LOG_LEVEL),
    handlers=[
        logging.FileHandler(Config.LOG_FILE),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class PrisonersDilemmaBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.config = Config()
        self.experiment_handler = ExperimentHandler()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            self.config.validate()
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise
    
    async def start_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await self.experiment_handler.start_experiment(update, context)
    
    async def help_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ –ë–æ—Ç –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –ø–æ –¥–∏–ª–µ–º–º–µ –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏–ª–µ–º–º—ã –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ.
–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 5 –º–∏–Ω—É—Ç –≤–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start
        """
        await update.message.reply_text(help_text)
    
    async def status_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_id = update.effective_user.id
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        admin_ids = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        
        if user_id not in admin_ids:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.experiment_handler.db.get_experiment_statistics()
        
        status_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:

üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.get('total_participants', 0)}

üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º:
{self._format_group_stats(stats.get('group_distribution', {}))}

üåç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫–∞–º:
{self._format_language_stats(stats.get('language_distribution', {}))}

üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:
{self._format_decision_stats(stats.get('decision_distribution', {}))}

üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(self.experiment_handler.active_sessions)}
        """
        
        await update.message.reply_text(status_text)
    
    def _format_group_stats(self, group_dist: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–ø–ø–∞–º"""
        if not group_dist:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        result = []
        for group, count in group_dist.items():
            group_name = "–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ" if group == "confess" else "–ú–æ–ª—á–∞–Ω–∏–µ"
            result.append(f"  {group_name}: {count}")
        
        return "\n".join(result)
    
    def _format_language_stats(self, lang_dist: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —è–∑—ã–∫–∞–º"""
        if not lang_dist:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        result = []
        for lang, count in lang_dist.items():
            lang_name = self.config.SUPPORTED_LANGUAGES.get(lang, lang)
            result.append(f"  {lang_name}: {count}")
        
        return "\n".join(result)
    
    def _format_decision_stats(self, decision_dist: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—à–µ–Ω–∏—è–º"""
        if not decision_dist:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        result = []
        for decision, count in decision_dist.items():
            decision_name = "–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ" if decision == "confess" else "–ú–æ–ª—á–∞–Ω–∏–µ"
            result.append(f"  {decision_name}: {count}")
        
        return "\n".join(result)
    
    async def handle_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø—Ä–æ—Å–∞
        if user_id in self.experiment_handler.survey_handler.survey_sessions:
            survey_data = self.experiment_handler.survey_handler.survey_sessions[user_id]
            if survey_data.get('waiting_for_text', False):
                await self.experiment_handler.survey_handler.handle_survey_response(update, context)
                return
        
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        await self.experiment_handler.handle_user_message(update, context)
    
    async def handle_callback(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        data = query.data
        
        if data.startswith('lang_'):
            await self.experiment_handler.handle_language_selection(update, context)
        elif data.startswith('decision_'):
            await self.experiment_handler.handle_decision(update, context)
        elif data.startswith('survey_'):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å
            await self.experiment_handler.survey_handler.handle_survey_response(update, context)
    
    def run_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.config.BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("status", self.status_command))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    
    def run_webhook(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.config.BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("status", self.status_command))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        if self.config.WEBHOOK_URL:
            application.run_webhook(
                listen="0.0.0.0",
                port=self.config.WEBHOOK_PORT,
                webhook_url=self.config.WEBHOOK_URL
            )
        else:
            # –ï—Å–ª–∏ webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
            logger.info("Webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling...")
            application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = PrisonersDilemmaBot()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
        if Config.WEBHOOK_URL:
            bot.run_webhook()
        else:
            bot.run_polling()
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    main()
