"""
–ê–¥–º–∏–Ω—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–º
"""

import logging
from datetime import datetime
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config.settings import Config
from utils.database import DatabaseManager

logger = logging.getLogger(__name__)

class AdminHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self):
        self.db = DatabaseManager()
        self.admin_user_ids = []
        for uid in Config.ADMIN_USER_IDS:
            if uid.strip():
                try:
                    self.admin_user_ids.append(int(uid.strip()))
                except ValueError:
                    logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç admin user ID: {uid}")
        
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –¥–ª—è user_id: {user_id}")
        logger.info(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {self.admin_user_ids}")
        logger.info(f"Config.ADMIN_USER_IDS: {Config.ADMIN_USER_IDS}")
        result = user_id in self.admin_user_ids
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {result}")
        return result
    
    async def handle_admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        command = context.args[0] if context.args else "help"
        
        if command == "help":
            await self._show_admin_help(update, context)
        elif command == "stats":
            await self._show_statistics(update, context)
        elif command == "reset":
            await self._reset_user_session(update, context)
        elif command == "list":
            await self._list_active_sessions(update, context)
        elif command == "export":
            await self._export_data(update, context)
        elif command == "toggle_testing":
            await self._toggle_testing_mode(update, context)
        else:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin help")
    
    async def _show_admin_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
üîß **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
`/admin stats` - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
`/admin list` - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
`/admin export` - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:**
`/admin reset <user_id>` - –°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
`/admin reset all` - –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
`/admin toggle_testing` - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

**–ü—Ä–∏–º–µ—Ä—ã:**
`/admin reset 123456789` - –°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 123456789
`/admin stats` - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def _show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
        try:
            stats = self.db.get_experiment_statistics()
            
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:**

üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_participants', 0)}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏: {stats.get('completed', 0)}

üìà **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º:**
"""
            
            for group, count in stats.get('groups', {}).items():
                stats_text += f"‚Ä¢ {group}: {count}\n"
            
            stats_text += f"""
üåç **–Ø–∑—ã–∫–∏:**
"""
            for lang, count in stats.get('language_distribution', {}).items():
                stats_text += f"‚Ä¢ {lang}: {count}\n"
            
            stats_text += f"""
üéØ **–†–µ—à–µ–Ω–∏—è:**
"""
            for decision, count in stats.get('decision_distribution', {}).items():
                stats_text += f"‚Ä¢ {decision}: {count}\n"
            
            if 'llm_analyses' in stats:
                stats_text += f"\nüß† **LLM –∞–Ω–∞–ª–∏–∑–æ–≤:** {stats['llm_analyses']}"
            
            await update.message.reply_text(stats_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    async def _reset_user_session(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/admin reset <user_id>` –∏–ª–∏ `/admin reset all`")
            return
        
        target = context.args[1]
        
        try:
            if target == "all":
                # –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
                await self._reset_all_sessions(update, context)
            else:
                # –°–±—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id = int(target)
                await self._reset_single_session(update, context, user_id)
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–µ—Å—Å–∏–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–µ—Å—Å–∏–∏.")
    
    async def _reset_single_session(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if hasattr(context.bot_data, 'active_sessions'):
                if user_id in context.bot_data['active_sessions']:
                    del context.bot_data['active_sessions'][user_id]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if hasattr(context.bot_data, 'conversation_history'):
                if user_id in context.bot_data['conversation_history']:
                    del context.bot_data['conversation_history'][user_id]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–µ—Å—Å–∏–π –æ–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if hasattr(context.bot_data, 'survey_sessions'):
                if user_id in context.bot_data['survey_sessions']:
                    del context.bot_data['survey_sessions'][user_id]
            
            await update.message.reply_text(f"‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–Ω–æ–≤–æ.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    
    async def _reset_all_sessions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            if hasattr(context.bot_data, 'active_sessions'):
                count = len(context.bot_data['active_sessions'])
                context.bot_data['active_sessions'].clear()
            else:
                count = 0
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
            if hasattr(context.bot_data, 'conversation_history'):
                context.bot_data['conversation_history'].clear()
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–∏ –æ–ø—Ä–æ—Å–æ–≤
            if hasattr(context.bot_data, 'survey_sessions'):
                context.bot_data['survey_sessions'].clear()
            
            await update.message.reply_text(f"‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –°–±—Ä–æ—à–µ–Ω–æ {count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π.")
    
    async def _list_active_sessions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        try:
            if not hasattr(context.bot_data, 'active_sessions') or not context.bot_data['active_sessions']:
                await update.message.reply_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
                return
            
            sessions_text = "üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:**\n\n"
            
            for user_id, session_data in context.bot_data['active_sessions'].items():
                time_remaining = (session_data['end_time'] - datetime.now()).total_seconds() / 60
                sessions_text += f"""
üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_id}
üéØ **–ì—Ä—É–ø–ø–∞:** {session_data.get('group', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üåç **–Ø–∑—ã–∫:** {session_data.get('language', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π:** {session_data.get('message_count', 0)}
‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å:** {max(0, time_remaining):.1f} –º–∏–Ω
---
"""
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(sessions_text) > 4000:
                parts = [sessions_text[i:i+4000] for i in range(0, len(sessions_text), 4000)]
                for part in parts:
                    await update.message.reply_text(part)
            else:
                await update.message.reply_text(sessions_text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π.")
    
    async def _export_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.db.get_experiment_statistics()
            
            # –ü–æ–ª—É—á–∞–µ–º LLM –¥–∞–Ω–Ω—ã–µ
            llm_data = await self.db.get_llm_analysis_data()
            
            export_text = f"""
üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.get('total_participants', 0)}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏: {stats.get('completed', 0)}
‚Ä¢ LLM –∞–Ω–∞–ª–∏–∑–æ–≤: {len(llm_data)}

üíæ **–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö**
‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏: —Ç–∞–±–ª–∏—Ü–∞ `participants`
‚Ä¢ LLM –∞–Ω–∞–ª–∏–∑: —Ç–∞–±–ª–∏—Ü–∞ `llm_analysis`
‚Ä¢ –ü–æ—Ç–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: —Ç–∞–±–ª–∏—Ü–∞ `conversation_flow`
‚Ä¢ –û–ø—Ä–æ—Å—ã: —Ç–∞–±–ª–∏—Ü–∞ `survey_responses`

üîç **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**
`/admin stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
`/admin list` - –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
"""
            
            await update.message.reply_text(export_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
    
    async def _toggle_testing_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            
            current_mode = Config.TESTING_MODE
            new_mode = not current_mode
            
            mode_text = "–≤–∫–ª—é—á–µ–Ω" if new_mode else "–≤—ã–∫–ª—é—á–µ–Ω"
            
            await update.message.reply_text(
                f"üîÑ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {mode_text}.\n\n"
                f"**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
                f"‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {Config.TESTING_MODE}\n"
                f"‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {Config.ALLOW_MULTIPLE_SESSIONS}\n"
                f"‚Ä¢ –ê–¥–º–∏–Ω—ã: {len(self.admin_user_ids)}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    
    async def check_user_eligibility(self, user_id: int) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.is_admin(user_id) or Config.TESTING_MODE or Config.ALLOW_MULTIPLE_SESSIONS:
                return {
                    'can_participate': True,
                    'reason': 'admin_or_testing_mode',
                    'message': None
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
            import sqlite3
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT COUNT(*) FROM participants WHERE telegram_user_id = ?",
                    (user_id,)
                )
                participation_count = cursor.fetchone()[0]
                
                if participation_count > 0:
                    return {
                        'can_participate': False,
                        'reason': 'already_participated',
                        'message': "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    }
            
            return {
                'can_participate': True,
                'reason': 'first_time',
                'message': None
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤–∞ —É—á–∞—Å—Ç–∏—è: {e}")
            return {
                'can_participate': False,
                'reason': 'error',
                'message': "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤–∞ —É—á–∞—Å—Ç–∏—è."
            }
