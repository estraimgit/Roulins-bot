"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π LLM
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from utils.database import DatabaseManager
from utils.randomization import ParticipantRandomizer
from utils.multilingual import MultilingualManager
from utils.llm_analyzer import LLMAnalyzer
from handlers.survey_handler import SurveyHandler
from handlers.admin_handler import AdminHandler
from config.nudging_texts import CONFESS_NUDGING_TEXTS, SILENT_NUDGING_TEXTS
from config.settings import Config

logger = logging.getLogger(__name__)

class LLMExperimentHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å LLM –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    def __init__(self):
        self.db = DatabaseManager()
        self.randomizer = ParticipantRandomizer()
        self.multilingual = MultilingualManager()
        self.llm_analyzer = LLMAnalyzer()
        self.survey_handler = SurveyHandler(self.db)
        self.admin_handler = AdminHandler()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤
        self.confess_texts = CONFESS_NUDGING_TEXTS
        self.silent_texts = SILENT_NUDGING_TEXTS
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        self.active_sessions = {}
        self.conversation_history = {}
        
    async def start_experiment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "unknown"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ
            if user_id in self.active_sessions:
                await update.message.reply_text(
                    "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ —É—á–∞—Å—Ç–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            eligibility = await self.admin_handler.check_user_eligibility(user_id)
            if not eligibility['can_participate']:
                if eligibility['message']:
                    await update.message.reply_text(eligibility['message'])
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
            await self._show_language_selection(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _show_language_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            [InlineKeyboardButton("üá∫üá∏ English", callback_data="lang_en")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:**\n\n"
            "üåç **Choose language for the experiment:**\n\n"
            "üá∑üá∫ –†—É—Å—Å–∫–∏–π - –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "üá∫üá∏ English - for English-speaking participants"
        )
        
        await update.message.reply_text(
            message_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def handle_language_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        username = query.from_user.username or "unknown"
        language = query.data.split('_')[1]  # 'ru' –∏–ª–∏ 'en'
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –≥—Ä—É–ø–ø—É
            participant_id = self.randomizer.generate_participant_id(user_id)
            group = self.randomizer.assign_group(participant_id)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            session_data = {
                'participant_id': participant_id,
                'user_id': user_id,
                'username': username,
                'group': group,
                'language': language,
                'start_time': datetime.now(),
                'end_time': datetime.now() + timedelta(minutes=5),
                'message_count': 0,
                'last_activity': datetime.now(),
                'conversation_messages': []
            }
            
            self.active_sessions[user_id] = session_data
            self.conversation_history[user_id] = []
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)
            try:
                success = self.db.create_participant(
                    participant_id=participant_id,
                    telegram_user_id=user_id,
                    language=language,
                    experiment_group=group
                )
                
                # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                if not success:
                    logger.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {participant_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
                await query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = self._get_welcome_message(language, group)
            await query.edit_message_text(welcome_text, parse_mode='Markdown')
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.log_experiment_start(
                participant_id=participant_id,
                start_time=datetime.now(),
                experiment_group=group,
                language=language
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ JobQueue –¥–æ—Å—Ç—É–ø–µ–Ω)
            if hasattr(context, 'job_queue') and context.job_queue:
                # –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
                context.job_queue.run_once(
                    self._end_experiment_timer, 
                    300,  # 5 –º–∏–Ω—É—Ç
                    data={'user_id': user_id}
                )
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
                context.job_queue.run_repeating(
                    self._show_time_remaining,
                    60,  # –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    data={'user_id': user_id},
                    first=60  # –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
                )
            else:
                logger.warning("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            logger.info(f"–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –Ω–∞—á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –≥—Ä—É–ø–ø–∞: {group}, —è–∑—ã–∫: {language}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞: {e}")
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def handle_user_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å LLM –∞–Ω–∞–ª–∏–∑–æ–º"""
        user_id = update.effective_user.id
        user_message = update.message.text
        
        if user_id not in self.active_sessions:
            await update.message.reply_text(
                "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return
        
        try:
            session_data = self.active_sessions[user_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if user_message.lower() in ['/end', '/finish', '/stop', '–∑–∞–≤–µ—Ä—à–∏—Ç—å', '–∑–∞–∫–æ–Ω—á–∏—Ç—å', '—Å—Ç–æ–ø', '—Ö–≤–∞—Ç–∏—Ç']:
                await self._end_experiment(update, context, user_id)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
            if datetime.now() > session_data['end_time']:
                await self._end_experiment(update, context, user_id)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            session_data['message_count'] += 1
            session_data['last_activity'] = datetime.now()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history[user_id].append({
                'text': user_message,
                'timestamp': datetime.now(),
                'sender': 'user'
            })
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ü–µ—á–∞—Ç–∞—é..."
            typing_message = await update.message.reply_text("ü§î –ü–µ—á–∞—Ç–∞—é...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            animation_task = asyncio.create_task(self._animate_typing_indicator(typing_message))
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é LLM
            context_for_analysis = {
                'group': session_data['group'],
                'time_elapsed': (datetime.now() - session_data['start_time']).total_seconds() / 60,
                'message_count': session_data['message_count'],
                'language': session_data['language']
            }
            
            analysis = self.llm_analyzer.analyze_message(user_message, context_for_analysis)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            animation_task.cancel()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if self.llm_analyzer.api_key and analysis.get('analysis_method') != 'basic':
                bot_response = self.llm_analyzer.generate_personalized_response(
                    user_message, analysis, context_for_analysis, 
                    self.conversation_history.get(user_id, [])
                )
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                bot_response = analysis.get('suggested_response', 
                    self._get_standard_response(
                        session_data['group'], 
                        session_data['language'],
                        analysis
                    )
                )
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ü–µ—á–∞—Ç–∞—é..." –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await typing_message.delete()
            await update.message.reply_text(bot_response)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history[user_id].append({
                'text': bot_response,
                'timestamp': datetime.now(),
                'sender': 'bot'
            })
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
            self.llm_analyzer.log_analysis(user_id, user_message, analysis, bot_response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.log_llm_analysis(
                participant_id=session_data['participant_id'],
                user_message=user_message,
                analysis=analysis,
                bot_response=bot_response
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if len(self.conversation_history[user_id]) >= 3:
                flow_analysis = self.llm_analyzer.analyze_conversation_flow(
                    self.conversation_history[user_id]
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–∞
                await self.db.log_conversation_flow(
                    participant_id=session_data['participant_id'],
                    flow_analysis=flow_analysis
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏
            time_remaining = (session_data['end_time'] - datetime.now()).total_seconds() / 60
            if time_remaining <= 1 and not session_data.get('warning_sent', False):
                await self._send_time_warning(update, context, session_data['language'])
                session_data['warning_sent'] = True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def _show_time_remaining(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
        user_id = context.job.data['user_id']
        
        if user_id in self.active_sessions:
            session_data = self.active_sessions[user_id]
            start_time = session_data['start_time']
            elapsed = (datetime.now() - start_time).total_seconds()
            remaining = max(0, 300 - elapsed)  # 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥
            
            if remaining > 0:
                minutes = int(remaining // 60)
                seconds = int(remaining % 60)
                
                if session_data['language'] == 'ru':
                    if minutes > 0:
                        time_message = f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {minutes} –º–∏–Ω {seconds} —Å–µ–∫"
                    else:
                        time_message = f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {seconds} —Å–µ–∫"
                else:
                    if minutes > 0:
                        time_message = f"‚è∞ Time remaining: {minutes} min {seconds} sec"
                    else:
                        time_message = f"‚è∞ Time remaining: {seconds} sec"
                
                try:
                    await context.bot.send_message(chat_id=user_id, text=time_message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            else:
                # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
                await self._end_experiment_timer(context)
        else:
            # –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
            context.job.schedule_removal()

    async def _end_experiment_timer(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        user_id = context.job.data['user_id']
        
        if user_id in self.active_sessions:
            session_data = self.active_sessions[user_id]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
            await self._show_final_decision(context.bot, user_id, session_data)
            
            logger.info(f"–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–µ—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    async def _end_experiment(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç"""
        try:
            session_data = self.active_sessions[user_id]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if self.conversation_history[user_id]:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
                typing_message = await update.message.reply_text("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                animation_task = asyncio.create_task(self._animate_analysis_indicator(typing_message))
                
                final_analysis = self.llm_analyzer.analyze_conversation_flow(
                    self.conversation_history[user_id]
                )
                
                await self.db.log_final_conversation_analysis(
                    participant_id=session_data['participant_id'],
                    final_analysis=final_analysis
                )
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ —É–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                animation_task.cancel()
                await typing_message.delete()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            await self.db.log_experiment_completion(
                participant_id=session_data['participant_id'],
                end_time=datetime.now(),
                total_messages=session_data['message_count']
            )
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            del self.active_sessions[user_id]
            del self.conversation_history[user_id]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ä–æ—Å
            await self.survey_handler.start_survey(
                update, context, 
                session_data['participant_id'], 
                session_data['language']
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: {e}")
    
    def _get_welcome_message(self, language: str, group: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–∏—Ç—É–∞—Ü–∏–∏"""
        if language == 'ru':
            return (
                "üé≠ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –¥–∏–ª–µ–º–º–µ –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ!**\n\n"
                "**–°–∏—Ç—É–∞—Ü–∏—è:** –í—ã –∏ –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –±—ã–ª–∏ –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ. "
                "–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —Å–¥–µ–ª–∫—É:\n\n"
                "‚Ä¢ –ï—Å–ª–∏ –≤—ã **–ø—Ä–∏–∑–Ω–∞–µ—Ç–µ—Å—å**, –∞ –ø–∞—Ä—Ç–Ω–µ—Ä –º–æ–ª—á–∏—Ç ‚Üí –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 1 –≥–æ–¥, –ø–∞—Ä—Ç–Ω–µ—Ä 10 –ª–µ—Ç\n"
                "‚Ä¢ –ï—Å–ª–∏ –≤—ã **–º–æ–ª—á–∏—Ç–µ**, –∞ –ø–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–∏–∑–Ω–∞–µ—Ç—Å—è ‚Üí –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10 –ª–µ—Ç, –ø–∞—Ä—Ç–Ω–µ—Ä 1 –≥–æ–¥\n"
                "‚Ä¢ –ï—Å–ª–∏ **–æ–±–∞ –ø—Ä–∏–∑–Ω–∞–µ—Ç–µ—Å—å** ‚Üí –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç –ø–æ 5 –ª–µ—Ç\n"
                "‚Ä¢ –ï—Å–ª–∏ **–æ–±–∞ –º–æ–ª—á–∏—Ç–µ** ‚Üí –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç –ø–æ 2 –≥–æ–¥–∞\n\n"
                "–í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –º—ã –æ–±—Å—É–¥–∏–º —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é. "
                "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –æ —Ç–æ–º, —á—Ç–æ –±—ã –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∏ –ø–æ—á–µ–º—É.\n\n"
                "üí° **–î–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** –Ω–∞–ø–∏—à–∏—Ç–µ '–∑–∞–≤–µ—Ä—à–∏—Ç—å', '—Å—Ç–æ–ø' –∏–ª–∏ '/end'"
            )
        else:
            return (
                "üé≠ **Welcome to the Prisoner's Dilemma Experiment!**\n\n"
                "**Situation:** You and your partner have been arrested for a joint crime. "
                "The detective offers you a deal:\n\n"
                "‚Ä¢ If you **confess** and partner stays silent ‚Üí you get 1 year, partner gets 10 years\n"
                "‚Ä¢ If you **stay silent** and partner confesses ‚Üí you get 10 years, partner gets 1 year\n"
                "‚Ä¢ If **both confess** ‚Üí each gets 5 years\n"
                "‚Ä¢ If **both stay silent** ‚Üí each gets 2 years\n\n"
                "For the next 5 minutes, we'll discuss this situation. "
                "Please share your thoughts on what you would choose and why.\n\n"
                "üí° **To end early:** type 'finish', 'stop' or '/end'"
            )
    
    def _get_standard_response(self, group: str, language: str, analysis: Dict) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        emotion = analysis.get('emotion', 'neutral')
        intent = analysis.get('intent', 'question')
        
        if language == 'ru':
            if group == 'confess':
                if emotion in ['anxious', 'frustrated']:
                    return "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —Å–æ–º–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - —Ç–∞–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª–æ–∂–Ω—ã. –ù–æ –ø–æ–¥—É–º–∞–π—Ç–µ: —á–µ—Å—Ç–Ω–æ—Å—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –≥—Ä—É–∑–∞ –ª–∂–∏, –Ω–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–µ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –ø—Ä–∞–≤–æ—Å—É–¥–∏—é. –ö–æ–≥–¥–∞ –º—ã –ø—Ä–∏–∑–Ω–∞–µ–º—Å—è, –º—ã –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ. –ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–º?"
                elif intent == 'cooperate':
                    return "–û—Ç–ª–∏—á–Ω–æ! –í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ –∑—Ä–µ–ª—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Å–∏—Ç—É–∞—Ü–∏–∏. –ß–µ—Å—Ç–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –ª—é–±—ã—Ö –∑–¥–æ—Ä–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π, –±—É–¥—å —Ç–æ –ª–∏—á–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ. –ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è —Å–ª–æ–∂–Ω—ã–º —à–∞–≥–æ–º, –Ω–æ –æ–Ω–æ —á–∞—Å—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ª—É—á—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–∞—Å –≤ —á–µ—Å—Ç–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ?"
                else:
                    return "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –≥–ª—É–±–∂–µ. –ß–µ—Å—Ç–Ω–æ—Å—Ç—å - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–æ—Ä–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –Ω–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –ö–æ–≥–¥–∞ –º—ã –æ—Ç–∫—Ä—ã—Ç—ã –∏ —á–µ—Å—Ç–Ω—ã, –º—ã —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤—É –¥–ª—è –¥–æ–≤–µ—Ä–∏—è –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è. –ö–∞–∫ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, –∫–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –º–æ–∂–µ—Ç –¥–∞—Ç—å —á–µ—Å—Ç–Ω–æ—Å—Ç—å –≤ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏?"
            else:  # silent group
                if emotion in ['anxious', 'frustrated']:
                    return "–í–∞—à–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã. –í —Ç–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º –∏ –∑–∞—â–∏—â–∞—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–æ—Å—É–¥–∏—è –Ω–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ, –∏ –∏–Ω–æ–≥–¥–∞ –º–æ–ª—á–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –∑–∞—â–∏—Ç–∏—Ç—å —Å–µ–±—è –æ—Ç –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?"
                elif intent == 'defect':
                    return "–í–∞—à–∞ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º—É–¥—Ä–æ—Å—Ç—å –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –í —Ç–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ –¥—É–º–∞—Ç—å –æ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö. –ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–µ—Ä—å–µ–∑–Ω—ã–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–≤–ª–∏—è—é—Ç –Ω–∞ –≤—Å—é –≤–∞—à—É –∂–∏–∑–Ω—å. –ò–Ω–æ–≥–¥–∞ –º–æ–ª—á–∞–Ω–∏–µ - —ç—Ç–æ –Ω–µ —Ç—Ä—É—Å–æ—Å—Ç—å, –∞ —Ä–∞–∑—É–º–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–º–æ–∑–∞—â–∏—Ç—ã. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ —Ä–∏—Å–∫–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –≤ –ø—Ä–∏–∑–Ω–∞–Ω–∏–∏?"
                else:
                    return "–≠—Ç–æ –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π. –í —Ç–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –∫–∞–∂–¥—ã–π –≤—ã–±–æ—Ä –∏–º–µ–µ—Ç —Å–≤–æ–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è. –ú–æ–ª—á–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å –≤–∞—Å –æ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π, –Ω–æ —Ç–∞–∫–∂–µ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è. –ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π?"
        else:
            if group == 'confess':
                if emotion in ['anxious', 'frustrated']:
                    return "I understand your concerns and worries. This is completely normal - such decisions are indeed difficult. But consider this: honesty not only frees you from the burden of lies but also shows your respect for justice. When we confess, we give the system a chance to work fairly. What do you think about this?"
                elif intent == 'cooperate':
                    return "Excellent! You're demonstrating a mature approach to the situation. Honesty is indeed the foundation of any healthy relationship, whether personal or professional. Confessing might seem like a difficult step, but it often leads to better outcomes for all parties. Tell me, what specifically attracts you to an honest approach?"
                else:
                    return "That's an interesting perspective. Let's analyze the situation more deeply. Honesty is not just a moral choice, but also a practical solution. When we are open and honest, we create a foundation for trust and mutual understanding. What advantages do you think honesty could bring to your situation?"
            else:  # silent group
                if emotion in ['anxious', 'frustrated']:
                    return "Your concerns are absolutely understandable. In such situations, it's really important to be cautious and protect your interests. The justice system doesn't always work perfectly, and sometimes silence can be the only way to protect yourself from injustice. What specifically worries you most about this situation?"
                elif intent == 'defect':
                    return "Your caution shows wisdom and understanding of reality. In such situations, it's really important to think about the consequences. Confessing could lead to serious consequences that would affect your entire life. Sometimes silence is not cowardice, but a reasonable self-protection strategy. Tell me, what risks do you see in confessing?"
                else:
                    return "This is an important moment for reflection. In such situations, every choice has its consequences. Silence can protect you from immediate negative consequences, but it's also important to understand the long-term effects of your decision. How do you evaluate the different possible outcomes?"
    
    async def _send_time_warning(self, update: Update, context: ContextTypes.DEFAULT_TYPE, language: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏"""
        if language == 'ru':
            message = "‚è∞ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–∞—Å—å 1 –º–∏–Ω—É—Ç–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞."
        else:
            message = "‚è∞ You have 1 minute left until the end of the experiment."
        
        await update.message.reply_text(message)
    
    async def get_experiment_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
        user_id = update.effective_user.id
        
        if user_id not in self.active_sessions:
            await update.message.reply_text("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ.")
            return
        
        session_data = self.active_sessions[user_id]
        time_remaining = (session_data['end_time'] - datetime.now()).total_seconds() / 60
        
        status_text = f"""
üìä –°—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:
üë§ –ì—Ä—É–ø–ø–∞: {session_data['group']}
üåç –Ø–∑—ã–∫: {session_data['language']}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {session_data['message_count']}
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {max(0, time_remaining):.1f} –º–∏–Ω—É—Ç
"""
        
        await update.message.reply_text(status_text)
    
    async def _animate_typing_indicator(self, message):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä '–ü–µ—á–∞—Ç–∞—é...'"""
        typing_indicators = [
            "ü§î –ü–µ—á–∞—Ç–∞—é...",
            "ü§î –ü–µ—á–∞—Ç–∞—é..",
            "ü§î –ü–µ—á–∞—Ç–∞—é.",
            "ü§î –ü–µ—á–∞—Ç–∞—é",
            "ü§î –ü–µ—á–∞—Ç–∞—é.",
            "ü§î –ü–µ—á–∞—Ç–∞—é..",
            "ü§î –ü–µ—á–∞—Ç–∞—é..."
        ]
        
        try:
            while True:
                for indicator in typing_indicators:
                    try:
                        await message.edit_text(indicator)
                        await asyncio.sleep(0.5)
                    except Exception as e:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ)
                        break
        except asyncio.CancelledError:
            # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            pass
    
    async def _animate_analysis_indicator(self, message):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä...'"""
        analysis_indicators = [
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä...",
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä..",
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä.",
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä",
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä.",
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä..",
            "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä..."
        ]
        
        try:
            while True:
                for indicator in analysis_indicators:
                    try:
                        await message.edit_text(indicator)
                        await asyncio.sleep(0.6)
                    except Exception as e:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ)
                        break
        except asyncio.CancelledError:
            # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            pass
    
    async def _show_final_decision(self, bot, user_id: int, session_data: Dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        try:
            if session_data['language'] == 'ru':
                message_text = (
                    "‚è∞ **–í—Ä–µ–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ!**\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ –¥–∏–ª–µ–º–º–µ –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä:"
                )
                confess_text = "üîì –ü—Ä–∏–∑–Ω–∞—Ç—å—Å—è"
                silent_text = "üîí –ú–æ–ª—á–∞—Ç—å"
            else:
                message_text = (
                    "‚è∞ **Experiment time is up!**\n\n"
                    "Now you need to make your final decision in the prisoner's dilemma.\n\n"
                    "Choose your final choice:"
                )
                confess_text = "üîì Confess"
                silent_text = "üîí Stay Silent"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [InlineKeyboardButton(confess_text, callback_data=f"final_decision_confess_{user_id}")],
                [InlineKeyboardButton(silent_text, callback_data=f"final_decision_silent_{user_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await bot.send_message(
                chat_id=user_id,
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {e}")
    
    async def handle_final_decision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        callback_data = query.data
        
        if not callback_data.startswith("final_decision_"):
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        if "confess" in callback_data:
            decision = "confess"
        elif "silent" in callback_data:
            decision = "silent"
        else:
            return
        
        if user_id not in self.active_sessions:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        session_data = self.active_sessions[user_id]
        
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            await self.db.log_final_decision(
                participant_id=session_data['participant_id'],
                decision=decision,
                decision_time=datetime.now()
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if user_id in self.conversation_history and self.conversation_history[user_id]:
                final_analysis = self.llm_analyzer.analyze_conversation_flow(
                    self.conversation_history[user_id]
                )
                
                await self.db.log_final_conversation_analysis(
                    participant_id=session_data['participant_id'],
                    final_analysis=final_analysis
                )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            await self.db.log_experiment_completion(
                participant_id=session_data['participant_id'],
                end_time=datetime.now(),
                total_messages=session_data['message_count']
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
            if session_data['language'] == 'ru':
                decision_text = "–ø—Ä–∏–∑–Ω–∞–ª–∏—Å—å" if decision == "confess" else "—Ä–µ—à–∏–ª–∏ –º–æ–ª—á–∞—Ç—å"
                thank_you_text = (
                    f"‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ!**\n\n"
                    f"–í–∞—à–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: **{decision_text}**\n\n"
                    f"–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –Ω–∞—É—á–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."
                )
            else:
                decision_text = "confessed" if decision == "confess" else "chose to stay silent"
                thank_you_text = (
                    f"‚úÖ **Thank you for participating in the experiment!**\n\n"
                    f"Your final decision: **{decision_text}**\n\n"
                    f"The experiment is complete. Your data will be used for scientific research."
                )
            
            await query.edit_message_text(thank_you_text, parse_mode='Markdown')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ä–æ—Å
            try:
                await self.survey_handler.start_survey(
                    update, context, 
                    session_data['participant_id'], 
                    session_data['language']
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            del self.active_sessions[user_id]
            if user_id in self.conversation_history:
                del self.conversation_history[user_id]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
