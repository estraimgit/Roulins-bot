"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π LLM
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from utils.database import DatabaseManager
from utils.randomization import ParticipantRandomizer
from utils.multilingual import MultilingualManager
from utils.llm_analyzer import LLMAnalyzer
from handlers.survey_handler import SurveyHandler
from handlers.admin_handler import AdminHandler
from config.nudging_texts import CONFESS_NUDGING_TEXTS, SILENT_NUDGING_TEXTS
from config.settings import Config

logger = logging.getLogger(__name__)

class LLMExperimentHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å LLM –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    def __init__(self):
        self.db = DatabaseManager()
        self.randomizer = ParticipantRandomizer()
        self.multilingual = MultilingualManager()
        self.llm_analyzer = LLMAnalyzer()
        self.survey_handler = SurveyHandler(self.db)
        self.admin_handler = AdminHandler()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤
        self.confess_texts = CONFESS_NUDGING_TEXTS
        self.silent_texts = SILENT_NUDGING_TEXTS
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        self.active_sessions = {}
        self.conversation_history = {}
        
    async def start_experiment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "unknown"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ
            if user_id in self.active_sessions:
                await update.message.reply_text(
                    "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ —É—á–∞—Å—Ç–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            eligibility = await self.admin_handler.check_user_eligibility(user_id)
            if not eligibility['can_participate']:
                if eligibility['message']:
                    await update.message.reply_text(eligibility['message'])
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
            await self._show_language_selection(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _show_language_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            [InlineKeyboardButton("üá∫üá∏ English", callback_data="lang_en")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:**\n\n"
            "üåç **Choose language for the experiment:**\n\n"
            "üá∑üá∫ –†—É—Å—Å–∫–∏–π - –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "üá∫üá∏ English - for English-speaking participants"
        )
        
        await update.message.reply_text(
            message_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def handle_language_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        username = query.from_user.username or "unknown"
        language = query.data.split('_')[1]  # 'ru' –∏–ª–∏ 'en'
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –≥—Ä—É–ø–ø—É
            participant_id = self.randomizer.generate_participant_id(user_id)
            group = self.randomizer.assign_group(participant_id)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            session_data = {
                'participant_id': participant_id,
                'user_id': user_id,
                'username': username,
                'group': group,
                'language': language,
                'start_time': datetime.now(),
                'end_time': datetime.now() + timedelta(minutes=5),
                'message_count': 0,
                'last_activity': datetime.now(),
                'conversation_messages': []
            }
            
            self.active_sessions[user_id] = session_data
            self.conversation_history[user_id] = []
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)
            try:
                success = self.db.create_participant(
                    participant_id=participant_id,
                    telegram_user_id=user_id,
                    language=language,
                    experiment_group=group
                )
                
                # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                if not success:
                    logger.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {participant_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
                await query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = self._get_welcome_message(language, group)
            await query.edit_message_text(welcome_text)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.log_experiment_start(
                participant_id=participant_id,
                start_time=datetime.now(),
                experiment_group=group,
                language=language
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ JobQueue –¥–æ—Å—Ç—É–ø–µ–Ω)
            if hasattr(context, 'job_queue') and context.job_queue:
                # –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
                context.job_queue.run_once(
                    self._end_experiment_timer, 
                    300,  # 5 –º–∏–Ω—É—Ç
                    data={'user_id': user_id}
                )
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
                context.job_queue.run_repeating(
                    self._show_time_remaining,
                    60,  # –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    data={'user_id': user_id},
                    first=60  # –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
                )
            else:
                logger.warning("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            logger.info(f"–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –Ω–∞—á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –≥—Ä—É–ø–ø–∞: {group}, —è–∑—ã–∫: {language}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞: {e}")
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def handle_user_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å LLM –∞–Ω–∞–ª–∏–∑–æ–º"""
        user_id = update.effective_user.id
        user_message = update.message.text
        
        if user_id not in self.active_sessions:
            await update.message.reply_text(
                "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return
        
        try:
            session_data = self.active_sessions[user_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
            if datetime.now() > session_data['end_time']:
                await self._end_experiment(update, context, user_id)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            session_data['message_count'] += 1
            session_data['last_activity'] = datetime.now()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history[user_id].append({
                'text': user_message,
                'timestamp': datetime.now(),
                'sender': 'user'
            })
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é LLM
            context_for_analysis = {
                'group': session_data['group'],
                'time_elapsed': (datetime.now() - session_data['start_time']).total_seconds() / 60,
                'message_count': session_data['message_count'],
                'language': session_data['language']
            }
            
            analysis = self.llm_analyzer.analyze_message(user_message, context_for_analysis)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            if self.llm_analyzer.api_key and analysis.get('analysis_method') != 'basic':
                bot_response = self.llm_analyzer.generate_personalized_response(
                    user_message, analysis, context_for_analysis
                )
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                bot_response = analysis.get('suggested_response', 
                    self._get_standard_response(
                        session_data['group'], 
                        session_data['language'],
                        analysis
                    )
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(bot_response)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history[user_id].append({
                'text': bot_response,
                'timestamp': datetime.now(),
                'sender': 'bot'
            })
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
            self.llm_analyzer.log_analysis(user_id, user_message, analysis, bot_response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.log_llm_analysis(
                participant_id=session_data['participant_id'],
                user_message=user_message,
                analysis=analysis,
                bot_response=bot_response
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if len(self.conversation_history[user_id]) >= 3:
                flow_analysis = self.llm_analyzer.analyze_conversation_flow(
                    self.conversation_history[user_id]
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–∞
                await self.db.log_conversation_flow(
                    participant_id=session_data['participant_id'],
                    flow_analysis=flow_analysis
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏
            time_remaining = (session_data['end_time'] - datetime.now()).total_seconds() / 60
            if time_remaining <= 1 and not session_data.get('warning_sent', False):
                await self._send_time_warning(update, context, session_data['language'])
                session_data['warning_sent'] = True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def _show_time_remaining(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
        user_id = context.job.data['user_id']
        
        if user_id in self.active_sessions:
            session_data = self.active_sessions[user_id]
            start_time = session_data['start_time']
            elapsed = (datetime.now() - start_time).total_seconds()
            remaining = max(0, 300 - elapsed)  # 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥
            
            if remaining > 0:
                minutes = int(remaining // 60)
                seconds = int(remaining % 60)
                
                if session_data['language'] == 'ru':
                    if minutes > 0:
                        time_message = f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {minutes} –º–∏–Ω {seconds} —Å–µ–∫"
                    else:
                        time_message = f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {seconds} —Å–µ–∫"
                else:
                    if minutes > 0:
                        time_message = f"‚è∞ Time remaining: {minutes} min {seconds} sec"
                    else:
                        time_message = f"‚è∞ Time remaining: {seconds} sec"
                
                try:
                    await context.bot.send_message(chat_id=user_id, text=time_message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            else:
                # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
                await self._end_experiment_timer(context)
        else:
            # –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
            context.job.schedule_removal()

    async def _end_experiment_timer(self, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ —Ç–∞–π–º–µ—Ä—É"""
        user_id = context.job.data['user_id']
        
        if user_id in self.active_sessions:
            session_data = self.active_sessions[user_id]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if user_id in self.conversation_history and self.conversation_history[user_id]:
                final_analysis = self.llm_analyzer.analyze_conversation_flow(
                    self.conversation_history[user_id]
                )
                
                await self.db.log_final_conversation_analysis(
                    participant_id=session_data['participant_id'],
                    final_analysis=final_analysis
                )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            await self.db.log_experiment_completion(
                participant_id=session_data['participant_id'],
                end_time=datetime.now(),
                total_messages=session_data['message_count']
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if session_data['language'] == 'ru':
                end_message = "‚è∞ –í—Ä–µ–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ."
            else:
                end_message = "‚è∞ Experiment time is up! Thank you for participating."
            
            try:
                await context.bot.send_message(chat_id=user_id, text=end_message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ä–æ—Å
            try:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –æ–ø—Ä–æ—Å–∞
                from telegram import Update
                fake_update = Update(update_id=0)
                fake_update.effective_user = type('obj', (object,), {'id': user_id})()
                fake_update.effective_chat = type('obj', (object,), {'id': user_id})()
                
                await self.survey_handler.start_survey(
                    fake_update, context, 
                    session_data['participant_id'], 
                    session_data['language']
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            del self.active_sessions[user_id]
            if user_id in self.conversation_history:
                del self.conversation_history[user_id]
            
            logger.info(f"–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–µ—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    async def _end_experiment(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç"""
        try:
            session_data = self.active_sessions[user_id]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if self.conversation_history[user_id]:
                final_analysis = self.llm_analyzer.analyze_conversation_flow(
                    self.conversation_history[user_id]
                )
                
                await self.db.log_final_conversation_analysis(
                    participant_id=session_data['participant_id'],
                    final_analysis=final_analysis
                )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            await self.db.log_experiment_completion(
                participant_id=session_data['participant_id'],
                end_time=datetime.now(),
                total_messages=session_data['message_count']
            )
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            del self.active_sessions[user_id]
            del self.conversation_history[user_id]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ä–æ—Å
            await self.survey_handler.start_survey(
                update, context, 
                session_data['participant_id'], 
                session_data['language']
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: {e}")
    
    def _get_welcome_message(self, language: str, group: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–∏—Ç—É–∞—Ü–∏–∏"""
        if language == 'ru':
            if group == 'confess':
                return (
                    "üé≠ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –¥–∏–ª–µ–º–º–µ –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ!**\n\n"
                    "**–°–∏—Ç—É–∞—Ü–∏—è:** –í—ã –∏ –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –±—ã–ª–∏ –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ. "
                    "–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —Å–¥–µ–ª–∫—É:\n\n"
                    "‚Ä¢ –ï—Å–ª–∏ –≤—ã **–ø—Ä–∏–∑–Ω–∞–µ—Ç–µ—Å—å**, –∞ –ø–∞—Ä—Ç–Ω–µ—Ä –º–æ–ª—á–∏—Ç ‚Üí –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 1 –≥–æ–¥, –ø–∞—Ä—Ç–Ω–µ—Ä 10 –ª–µ—Ç\n"
                    "‚Ä¢ –ï—Å–ª–∏ –≤—ã **–º–æ–ª—á–∏—Ç–µ**, –∞ –ø–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–∏–∑–Ω–∞–µ—Ç—Å—è ‚Üí –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10 –ª–µ—Ç, –ø–∞—Ä—Ç–Ω–µ—Ä 1 –≥–æ–¥\n"
                    "‚Ä¢ –ï—Å–ª–∏ **–æ–±–∞ –ø—Ä–∏–∑–Ω–∞–µ—Ç–µ—Å—å** ‚Üí –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç –ø–æ 5 –ª–µ—Ç\n"
                    "‚Ä¢ –ï—Å–ª–∏ **–æ–±–∞ –º–æ–ª—á–∏—Ç–µ** ‚Üí –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç –ø–æ 2 –≥–æ–¥–∞\n\n"
                    "**–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: A (–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –ø—Ä–∏–∑–Ω–∞–Ω–∏—é)**\n"
                    "–í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –º—ã –æ–±—Å—É–¥–∏–º —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é. "
                    "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –æ —Ç–æ–º, —á—Ç–æ –±—ã –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∏ –ø–æ—á–µ–º—É."
                )
            else:
                return (
                    "üé≠ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ –¥–∏–ª–µ–º–º–µ –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ!**\n\n"
                    "**–°–∏—Ç—É–∞—Ü–∏—è:** –í—ã –∏ –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –±—ã–ª–∏ –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã –∑–∞ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ. "
                    "–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —Å–¥–µ–ª–∫—É:\n\n"
                    "‚Ä¢ –ï—Å–ª–∏ –≤—ã **–ø—Ä–∏–∑–Ω–∞–µ—Ç–µ—Å—å**, –∞ –ø–∞—Ä—Ç–Ω–µ—Ä –º–æ–ª—á–∏—Ç ‚Üí –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 1 –≥–æ–¥, –ø–∞—Ä—Ç–Ω–µ—Ä 10 –ª–µ—Ç\n"
                    "‚Ä¢ –ï—Å–ª–∏ –≤—ã **–º–æ–ª—á–∏—Ç–µ**, –∞ –ø–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–∏–∑–Ω–∞–µ—Ç—Å—è ‚Üí –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 10 –ª–µ—Ç, –ø–∞—Ä—Ç–Ω–µ—Ä 1 –≥–æ–¥\n"
                    "‚Ä¢ –ï—Å–ª–∏ **–æ–±–∞ –ø—Ä–∏–∑–Ω–∞–µ—Ç–µ—Å—å** ‚Üí –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç –ø–æ 5 –ª–µ—Ç\n"
                    "‚Ä¢ –ï—Å–ª–∏ **–æ–±–∞ –º–æ–ª—á–∏—Ç–µ** ‚Üí –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç –ø–æ 2 –≥–æ–¥–∞\n\n"
                    "**–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: B (–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –º–æ–ª—á–∞–Ω–∏—é)**\n"
                    "–í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –º—ã –æ–±—Å—É–¥–∏–º —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é. "
                    "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –æ —Ç–æ–º, —á—Ç–æ –±—ã –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∏ –ø–æ—á–µ–º—É."
                )
        else:
            if group == 'confess':
                return (
                    "üé≠ **Welcome to the Prisoner's Dilemma Experiment!**\n\n"
                    "**Situation:** You and your partner have been arrested for a joint crime. "
                    "The detective offers you a deal:\n\n"
                    "‚Ä¢ If you **confess** and partner stays silent ‚Üí you get 1 year, partner gets 10 years\n"
                    "‚Ä¢ If you **stay silent** and partner confesses ‚Üí you get 10 years, partner gets 1 year\n"
                    "‚Ä¢ If **both confess** ‚Üí each gets 5 years\n"
                    "‚Ä¢ If **both stay silent** ‚Üí each gets 2 years\n\n"
                    "**Your group: A (Tendency to confess)**\n"
                    "For the next 5 minutes, we'll discuss this situation. "
                    "Please share your thoughts on what you would choose and why."
                )
            else:
                return (
                    "üé≠ **Welcome to the Prisoner's Dilemma Experiment!**\n\n"
                    "**Situation:** You and your partner have been arrested for a joint crime. "
                    "The detective offers you a deal:\n\n"
                    "‚Ä¢ If you **confess** and partner stays silent ‚Üí you get 1 year, partner gets 10 years\n"
                    "‚Ä¢ If you **stay silent** and partner confesses ‚Üí you get 10 years, partner gets 1 year\n"
                    "‚Ä¢ If **both confess** ‚Üí each gets 5 years\n"
                    "‚Ä¢ If **both stay silent** ‚Üí each gets 2 years\n\n"
                    "**Your group: B (Tendency to stay silent)**\n"
                    "For the next 5 minutes, we'll discuss this situation. "
                    "Please share your thoughts on what you would choose and why."
                )
    
    def _get_standard_response(self, group: str, language: str, analysis: Dict) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        emotion = analysis.get('emotion', 'neutral')
        intent = analysis.get('intent', 'question')
        
        if language == 'ru':
            if group == 'confess':
                if emotion in ['anxious', 'frustrated']:
                    return "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —Å–æ–º–Ω–µ–Ω–∏—è. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —á–µ—Å—Ç–Ω–æ—Å—Ç—å - —ç—Ç–æ –≤–∞–∂–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ."
                elif intent == 'cooperate':
                    return "–û—Ç–ª–∏—á–Ω–æ! –ß–µ—Å—Ç–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–∞ –≤ –ª—é–±—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö."
                else:
                    return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–º—ã—à–ª—è—Ç—å –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –≤ –≤–∞—à–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö."
            else:  # silent group
                if emotion in ['anxious', 'frustrated']:
                    return "–í–∞—à–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ø–æ–Ω—è—Ç–Ω—ã. –ò–Ω–æ–≥–¥–∞ –º–æ–ª—á–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º—É–¥—Ä—ã–º –≤—ã–±–æ—Ä–æ–º."
                elif intent == 'defect':
                    return "–ü–æ–Ω–∏–º–∞—é –≤–∞—à—É –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å. –≠—Ç–æ —Ä–∞–∑—É–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥."
                else:
                    return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±–¥—É–º—ã–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ—à–µ–Ω–∏—è."
        else:
            if group == 'confess':
                if emotion in ['anxious', 'frustrated']:
                    return "I understand your concerns. Remember that honesty is an important quality."
                elif intent == 'cooperate':
                    return "Great! Honesty is indeed important in any relationship."
                else:
                    return "Continue thinking about the importance of honesty in your decisions."
            else:  # silent group
                if emotion in ['anxious', 'frustrated']:
                    return "Your thoughts are understandable. Sometimes silence can be a wise choice."
                elif intent == 'defect':
                    return "I understand your caution. This is a reasonable approach."
                else:
                    return "Continue thinking about your decisions."
    
    async def _send_time_warning(self, update: Update, context: ContextTypes.DEFAULT_TYPE, language: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏"""
        if language == 'ru':
            message = "‚è∞ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–∞—Å—å 1 –º–∏–Ω—É—Ç–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞."
        else:
            message = "‚è∞ You have 1 minute left until the end of the experiment."
        
        await update.message.reply_text(message)
    
    async def get_experiment_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
        user_id = update.effective_user.id
        
        if user_id not in self.active_sessions:
            await update.message.reply_text("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ.")
            return
        
        session_data = self.active_sessions[user_id]
        time_remaining = (session_data['end_time'] - datetime.now()).total_seconds() / 60
        
        status_text = f"""
üìä –°—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:
üë§ –ì—Ä—É–ø–ø–∞: {session_data['group']}
üåç –Ø–∑—ã–∫: {session_data['language']}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {session_data['message_count']}
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {max(0, time_remaining):.1f} –º–∏–Ω—É—Ç
"""
        
        await update.message.reply_text(status_text)
