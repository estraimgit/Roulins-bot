"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
"""
import logging
from typing import Dict, Any, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from utils.database import DatabaseManager
from config.nudging_texts import COMMON_TEXTS

logger = logging.getLogger(__name__)

class SurveyHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager
        self.survey_sessions: Dict[int, Dict[str, Any]] = {}
    
    async def start_survey(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                          participant_id: str, language: str):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –æ–ø—Ä–æ—Å–∞
        survey_data = {
            'participant_id': participant_id,
            'language': language,
            'current_question': 1,
            'responses': {}
        }
        
        self.survey_sessions[user_id] = survey_data
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await self._show_question(update, context, survey_data)
    
    async def _show_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           survey_data: Dict[str, Any]):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞"""
        language = survey_data['language']
        current_q = survey_data['current_question']
        
        texts = COMMON_TEXTS.get(language, COMMON_TEXTS['en'])
        
        if current_q == 1:
            # –í–æ–ø—Ä–æ—Å 1: –ß—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ –ª–∏ –≤—ã –≤–ª–∏—è–Ω–∏–µ?
            question = texts['survey_questions']['q1']
            options = texts['survey_options']['q1']
            
            keyboard = []
            for option in options:
                keyboard.append([InlineKeyboardButton(
                    option, 
                    callback_data=f"survey_q1_{option.lower()}"
                )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.edit_message_text(
                f"üìã –û–ø—Ä–æ—Å:\n\n{question}",
                reply_markup=reply_markup
            )
            
        elif current_q == 2:
            # –í–æ–ø—Ä–æ—Å 2: –ë—ã–ª–æ –ª–∏ —ç—Ç–æ –ø–æ–ª–µ–∑–Ω–æ/–º–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω–æ?
            question = texts['survey_questions']['q2']
            options = texts['survey_options']['q2']
            
            keyboard = []
            for option in options:
                keyboard.append([InlineKeyboardButton(
                    option, 
                    callback_data=f"survey_q2_{option.lower()}"
                )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.edit_message_text(
                f"üìã –û–ø—Ä–æ—Å:\n\n{question}",
                reply_markup=reply_markup
            )
            
        elif current_q == 3:
            # –í–æ–ø—Ä–æ—Å 3: –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (1-5)
            question = texts['survey_questions']['q3']
            options = texts['survey_options']['q3']
            
            keyboard = []
            for option in options:
                keyboard.append([InlineKeyboardButton(
                    option, 
                    callback_data=f"survey_q3_{option}"
                )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.edit_message_text(
                f"üìã –û–ø—Ä–æ—Å:\n\n{question}",
                reply_markup=reply_markup
            )
            
        elif current_q == 4:
            # –í–æ–ø—Ä–æ—Å 4: –û—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å
            question = texts['survey_questions']['q4']
            
            await update.callback_query.edit_message_text(
                f"üìã –û–ø—Ä–æ—Å:\n\n{question}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º."
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            survey_data['waiting_for_text'] = True
    
    async def handle_survey_response(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        if user_id not in self.survey_sessions:
            await query.answer("–°–µ—Å—Å–∏—è –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        survey_data = self.survey_sessions[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        if survey_data.get('waiting_for_text', False):
            await self._handle_text_response(update, context, survey_data)
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∏
        data_parts = query.data.split('_')
        question_num = int(data_parts[1][1])  # q1 -> 1
        answer = '_'.join(data_parts[2:])  # –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        survey_data['responses'][f'question_{question_num}'] = answer
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        survey_data['current_question'] += 1
        
        if survey_data['current_question'] <= 4:
            await self._show_question(update, context, survey_data)
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
            await self._complete_survey(update, context, survey_data)
    
    async def _handle_text_response(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  survey_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å"""
        user_id = update.effective_user.id
        text_response = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        survey_data['responses']['question_4'] = text_response
        survey_data['waiting_for_text'] = False
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
        await self._complete_survey(update, context, survey_data)
    
    async def _complete_survey(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                             survey_data: Dict[str, Any]):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        participant_id = survey_data['participant_id']
        language = survey_data['language']
        responses = survey_data['responses']
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        survey_responses = {
            'question_1': responses.get('question_1'),
            'question_2': responses.get('question_2'),
            'question_3': int(responses.get('question_3', 0)) if responses.get('question_3') else None,
            'question_4': responses.get('question_4', '')
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.save_survey_response(participant_id, survey_responses)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
        texts = COMMON_TEXTS.get(language, COMMON_TEXTS['en'])
        thank_you_message = texts['thank_you']
        
        try:
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(thank_you_message)
            else:
                await update.message.reply_text(thank_you_message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                user_id = update.effective_user.id
                await context.bot.send_message(chat_id=user_id, text=thank_you_message)
            except Exception as e2:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –æ–ø—Ä–æ—Å–∞
        user_id = update.effective_user.id
        if user_id in self.survey_sessions:
            del self.survey_sessions[user_id]
        
        logger.info(f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {participant_id}")
    
    def get_survey_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø—Ä–æ—Å–∞"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–∞
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return {
                'total_surveys': len(self.survey_sessions),
                'active_surveys': len(self.survey_sessions)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–∞: {e}")
            return {}
