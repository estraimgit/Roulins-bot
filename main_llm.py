"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import logging
import asyncio
import json
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram import Update
from telegram.ext import ContextTypes

from config.settings import Config
from handlers.llm_experiment_handler import LLMExperimentHandler
from handlers.survey_handler import SurveyHandler
from handlers.admin_handler import AdminHandler
from utils.database import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, Config.LOG_LEVEL),
    handlers=[
        logging.FileHandler(Config.LOG_FILE),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class LLMPrisonersDilemmaBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ —Å LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.config = Config()
        self.db = DatabaseManager()
        self.experiment_handler = LLMExperimentHandler()
        self.survey_handler = SurveyHandler(self.db)
        self.admin_handler = AdminHandler()
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await self.experiment_handler.start_experiment(update, context)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ **Prisoner's Dilemma Experiment Bot**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
/llm_status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å LLM –∞–Ω–∞–ª–∏–∑–∞
/admin - –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

**–û —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ:**
–≠—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –¥–∏–ª–µ–º–º–µ –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –¥–ª–∏—Ç—Å—è 5 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–ø—Ä–æ—Å.

**–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:**
–í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö —Ü–µ–ª–µ–π.

**–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
"""
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        await self.experiment_handler.get_experiment_status(update, context)
    
    async def llm_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /llm_status"""
        user_id = update.effective_user.id
        
        if user_id not in self.experiment_handler.active_sessions:
            await update.message.reply_text("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ.")
            return
        
        session_data = self.experiment_handler.active_sessions[user_id]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ LLM –∞–Ω–∞–ª–∏–∑–∞
        llm_data = await self.db.get_llm_analysis_data(session_data['participant_id'])
        
        status_text = f"""
üß† **LLM –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å:**

üìä **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫: {session_data['participant_id']}
‚Ä¢ –ì—Ä—É–ø–ø–∞: {session_data['group']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(llm_data)}

üîç **–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑:**
"""
        
        if llm_data:
            last_analysis = llm_data[-1]
            analysis = json.loads(last_analysis['analysis_json'])
            
            status_text += f"""
‚Ä¢ –≠–º–æ—Ü–∏—è: {analysis.get('emotion', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {analysis.get('intent', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.get('confidence', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —É–±–µ–∂–¥–µ–Ω–∏—é: {analysis.get('persuasion_resistance', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω—É–¥–∂–∏–Ω–≥–∞: {analysis.get('nudging_effectiveness', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –†–∏—Å–∫ –≤—ã—Ö–æ–¥–∞: {analysis.get('risk_of_dropout', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
"""
        else:
            status_text += "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è"
        
        await update.message.reply_text(status_text)
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
        await self.admin_handler.handle_admin_command(update, context)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith('lang_'):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
            await self.experiment_handler.handle_language_selection(update, context)
        elif data.startswith('survey_'):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å
            await self.survey_handler.handle_survey_response(update, context)
        elif data.startswith('final_decision_'):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            await self.experiment_handler.handle_final_decision(update, context)
        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø—Ä–æ—Å–∞
        if user_id in self.survey_handler.survey_sessions:
            survey_data = self.survey_handler.survey_sessions[user_id]
            if survey_data.get('waiting_for_text', False):
                await self.survey_handler.handle_survey_response(update, context)
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        if message_text.lower() in ['/end', '/finish', '/stop', '–∑–∞–≤–µ—Ä—à–∏—Ç—å', '–∑–∞–∫–æ–Ω—á–∏—Ç—å', '—Å—Ç–æ–ø', '—Ö–≤–∞—Ç–∏—Ç']:
            if user_id in self.experiment_handler.active_sessions:
                await self.experiment_handler._end_experiment(update, context, user_id)
                return
            else:
                await update.message.reply_text("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return
        
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        await self.experiment_handler.handle_user_message(update, context)
    
    def run_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å JobQueue
        application = Application.builder().token(self.config.BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("status", self.status_command))
        application.add_handler(CommandHandler("llm_status", self.llm_status_command))
        application.add_handler(CommandHandler("admin", self.admin_command))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        application.add_handler(MessageHandler(filters.TEXT, self.handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    
    def run_webhook(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å JobQueue
        application = Application.builder().token(self.config.BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("status", self.status_command))
        application.add_handler(CommandHandler("llm_status", self.llm_status_command))
        application.add_handler(CommandHandler("admin", self.admin_command))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        application.add_handler(MessageHandler(filters.TEXT, self.handle_message))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        if self.config.WEBHOOK_URL:
            application.run_webhook(
                listen="0.0.0.0",
                port=self.config.WEBHOOK_PORT,
                webhook_url=self.config.WEBHOOK_URL
            )
        else:
            # –ï—Å–ª–∏ webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
            logger.info("Webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling...")
            application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        Config.validate()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = LLMPrisonersDilemmaBot()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
        if Config.WEBHOOK_URL:
            bot.run_webhook()
        else:
            bot.run_polling()
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
